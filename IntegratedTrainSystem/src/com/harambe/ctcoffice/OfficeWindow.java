/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.harambe.ctcoffice;

import com.harambe.trackmodel.Block;
import com.harambe.trackmodel.Track;
import com.harambe.waysidecontroller.WaysideControllerHandler;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JRadioButton;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jake
 */
public class OfficeWindow extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private double DT = .1;
    Track officeTrackModel;
    DefaultTableModel blockTableModel;
    DefaultTableModel stationTableModel;
    WaysideControllerHandler handler;
    public OfficeWindow(WaysideControllerHandler handler) {
        this.handler = handler;
        
        initComponents();
      

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manualButtonGroup = new javax.swing.ButtonGroup();
        DispatchLineButtonGroup = new javax.swing.ButtonGroup();
        officeTabbedPane = new javax.swing.JTabbedPane();
        officejPanel = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        manualModeLabel = new javax.swing.JLabel();
        manualOnButton = new javax.swing.JToggleButton();
        manualOffButton = new javax.swing.JToggleButton();
        loadTrackButton = new javax.swing.JButton();
        clockSlider = new javax.swing.JSlider();
        clockLabel = new javax.swing.JLabel();
        fileInput = new javax.swing.JTextField();
        stationPanel = new javax.swing.JPanel();
        stationScrollPane1 = new javax.swing.JScrollPane();
        stationTable = new javax.swing.JTable();
        trainPanel = new javax.swing.JPanel();
        trainScrollPane2 = new javax.swing.JScrollPane();
        trainTable = new javax.swing.JTable();
        blockManagerPanel = new javax.swing.JPanel();
        blockScrollPane5 = new javax.swing.JScrollPane();
        blockTable = new javax.swing.JTable();
        dispatchTrainPanel = new javax.swing.JPanel();
        speedLimitLabel = new javax.swing.JLabel();
        dispatchTrainButton = new javax.swing.JButton();
        dispatchBlockLabel = new javax.swing.JLabel();
        dispatchBlockInput = new javax.swing.JTextField();
        speedLimitInput = new javax.swing.JTextField();
        dispatchGreenLine = new javax.swing.JRadioButton();
        dispatchRedLine = new javax.swing.JRadioButton();
        trainIDInput = new javax.swing.JTextField();
        trainIDLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        toggleBlockStatus = new javax.swing.JButton();
        toggleSwitchButton = new javax.swing.JButton();
        authorityChange = new javax.swing.JTextField();
        sendAuthority = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        newSpeedLimit = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        trackMapImageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CTC Office");

        officejPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "System Controls", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        officejPanel.setToolTipText("Changes the Properties of the Overall Office System Dashboard\n");

        controlsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        manualModeLabel.setText("Manual Mode");

        manualButtonGroup.add(manualOnButton);
        manualOnButton.setSelected(true);
        manualOnButton.setText("On");
        manualOnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualOnButtonActionPerformed(evt);
            }
        });

        manualButtonGroup.add(manualOffButton);
        manualOffButton.setText("Off");
        manualOffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualOffButtonActionPerformed(evt);
            }
        });

        loadTrackButton.setText("Load Track");
        loadTrackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTrackButtonActionPerformed(evt);
            }
        });

        clockSlider.setMajorTickSpacing(1);
        clockSlider.setMaximum(10);
        clockSlider.setMinimum(1);
        clockSlider.setPaintLabels(true);
        clockSlider.setPaintTicks(true);
        clockSlider.setSnapToTicks(true);
        clockSlider.setValue(1);

        clockLabel.setText("Wall Clock Speed");

        fileInput.setText("OfficeTrack.csv");
        fileInput.setToolTipText("");

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addComponent(clockLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlsPanelLayout.createSequentialGroup()
                                .addComponent(manualOnButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manualOffButton))
                            .addComponent(clockSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(controlsPanelLayout.createSequentialGroup()
                        .addComponent(fileInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadTrackButton)))
                .addContainerGap())
            .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(manualModeLabel)
                    .addContainerGap(232, Short.MAX_VALUE)))
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manualOnButton)
                    .addComponent(manualOffButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadTrackButton)
                    .addComponent(fileInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clockLabel)
                    .addComponent(clockSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
            .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlsPanelLayout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(manualModeLabel)
                    .addContainerGap(107, Short.MAX_VALUE)))
        );

        stationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Station Monitor"));

        stationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Station", "Line", "Throughput", "Occupied"
            }
        ));
        stationTable.setEnabled(false);
        stationScrollPane1.setViewportView(stationTable);

        javax.swing.GroupLayout stationPanelLayout = new javax.swing.GroupLayout(stationPanel);
        stationPanel.setLayout(stationPanelLayout);
        stationPanelLayout.setHorizontalGroup(
            stationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
            .addGroup(stationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(stationScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
        );
        stationPanelLayout.setVerticalGroup(
            stationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(stationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(stationScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
        );

        trainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Train Monitor"));

        trainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Line", "Destination", "Speed Limit"
            }
        ));
        trainTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        trainTable.getTableHeader().setReorderingAllowed(false);
        trainScrollPane2.setViewportView(trainTable);
        if (trainTable.getColumnModel().getColumnCount() > 0) {
            trainTable.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout trainPanelLayout = new javax.swing.GroupLayout(trainPanel);
        trainPanel.setLayout(trainPanelLayout);
        trainPanelLayout.setHorizontalGroup(
            trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(trainScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
        );
        trainPanelLayout.setVerticalGroup(
            trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(trainScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        blockManagerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Block Manager"));

        blockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Block Number", "Line", "Speed Limit", "Infrastrucure", "Occupied", "Track Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blockTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        blockTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        blockScrollPane5.setViewportView(blockTable);

        javax.swing.GroupLayout blockManagerPanelLayout = new javax.swing.GroupLayout(blockManagerPanel);
        blockManagerPanel.setLayout(blockManagerPanelLayout);
        blockManagerPanelLayout.setHorizontalGroup(
            blockManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockManagerPanelLayout.createSequentialGroup()
                .addComponent(blockScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 929, Short.MAX_VALUE)
                .addContainerGap())
        );
        blockManagerPanelLayout.setVerticalGroup(
            blockManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockManagerPanelLayout.createSequentialGroup()
                .addComponent(blockScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        dispatchTrainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dispatch Train"));

        speedLimitLabel.setText("Speed Limit:");

        dispatchTrainButton.setText("Dispatch");
        dispatchTrainButton.setEnabled(false);
        dispatchTrainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispatchTrainButtonActionPerformed(evt);
            }
        });

        dispatchBlockLabel.setText("Destination Block");

        dispatchBlockInput.setEnabled(false);
        dispatchBlockInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispatchBlockInputActionPerformed(evt);
            }
        });

        speedLimitInput.setEnabled(false);
        speedLimitInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedLimitInputActionPerformed(evt);
            }
        });

        DispatchLineButtonGroup.add(dispatchGreenLine);
        dispatchGreenLine.setText("Green");
        dispatchGreenLine.setEnabled(false);
        dispatchGreenLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispatchGreenLineActionPerformed(evt);
            }
        });

        DispatchLineButtonGroup.add(dispatchRedLine);
        dispatchRedLine.setText("Red");
        dispatchRedLine.setEnabled(false);
        dispatchRedLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispatchRedLineActionPerformed(evt);
            }
        });

        trainIDInput.setEnabled(false);
        trainIDInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainIDInputActionPerformed(evt);
            }
        });

        trainIDLabel.setText("Train ID:");

        javax.swing.GroupLayout dispatchTrainPanelLayout = new javax.swing.GroupLayout(dispatchTrainPanel);
        dispatchTrainPanel.setLayout(dispatchTrainPanelLayout);
        dispatchTrainPanelLayout.setHorizontalGroup(
            dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dispatchTrainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dispatchTrainPanelLayout.createSequentialGroup()
                        .addComponent(dispatchBlockLabel)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dispatchTrainPanelLayout.createSequentialGroup()
                        .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(trainIDLabel)
                            .addComponent(speedLimitLabel))
                        .addGap(18, 18, 18)))
                .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dispatchBlockInput, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(speedLimitInput)
                    .addComponent(trainIDInput))
                .addGap(18, 18, 18)
                .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dispatchTrainPanelLayout.createSequentialGroup()
                        .addComponent(dispatchGreenLine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dispatchRedLine)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(dispatchTrainPanelLayout.createSequentialGroup()
                        .addComponent(dispatchTrainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        dispatchTrainPanelLayout.setVerticalGroup(
            dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dispatchTrainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dispatchTrainPanelLayout.createSequentialGroup()
                        .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dispatchBlockLabel)
                            .addComponent(dispatchBlockInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(speedLimitLabel)
                            .addComponent(speedLimitInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trainIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trainIDLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(dispatchTrainPanelLayout.createSequentialGroup()
                        .addComponent(dispatchTrainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(dispatchTrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dispatchGreenLine)
                            .addComponent(dispatchRedLine)))))
        );

        toggleBlockStatus.setText("Toggle Block Status");
        toggleBlockStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBlockStatusActionPerformed(evt);
            }
        });

        toggleSwitchButton.setText("Toggle Switch");
        toggleSwitchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleSwitchButtonActionPerformed(evt);
            }
        });

        authorityChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorityChangeActionPerformed(evt);
            }
        });

        sendAuthority.setText("Send Authority");
        sendAuthority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendAuthorityActionPerformed(evt);
            }
        });

        jLabel1.setText("New Destination");

        jLabel2.setText("New Speed Limit");

        newSpeedLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSpeedLimitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toggleBlockStatus)
                    .addComponent(toggleSwitchButton))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(authorityChange, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                    .addComponent(newSpeedLimit))
                .addGap(18, 18, 18)
                .addComponent(sendAuthority)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(toggleBlockStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(toggleSwitchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(authorityChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(newSpeedLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(sendAuthority)
                        .addGap(51, 51, 51))))
        );

        trackMapImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trackimage.png")));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(trackMapImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(trackMapImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout officejPanelLayout = new javax.swing.GroupLayout(officejPanel);
        officejPanel.setLayout(officejPanelLayout);
        officejPanelLayout.setHorizontalGroup(
            officejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(officejPanelLayout.createSequentialGroup()
                .addGroup(officejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(officejPanelLayout.createSequentialGroup()
                        .addGroup(officejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(officejPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(dispatchTrainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(trainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(stationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(blockManagerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(officejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(officejPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(officejPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addContainerGap())
        );
        officejPanelLayout.setVerticalGroup(
            officejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(officejPanelLayout.createSequentialGroup()
                .addGroup(officejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(officejPanelLayout.createSequentialGroup()
                        .addGroup(officejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(officejPanelLayout.createSequentialGroup()
                                .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dispatchTrainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(trainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(blockManagerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(officejPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );

        officeTabbedPane.addTab("CTC Office Overview", officejPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(officeTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(officeTabbedPane)
                .addContainerGap())
        );

        officeTabbedPane.getAccessibleContext().setAccessibleName("CTC Office Overview");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    void refreshOccupiedBlocks() {
        officeTrackModel = handler.ctcBlockRequest();
        //stationTableModel.
//        officeTrackModel.getBlock(4, "red").toggleOccupied();
//        officeTrackModel.getBlock(30, "green").toggleOccupied();
        //System.out.println(trackTester.getBlock(4, "red").isBlockOccupied());
        int i=1;
        int j=1;
            do{
                 
               if (officeTrackModel.getBlock(i, "red").isBlockOccupied()){
                   blockTableModel.setValueAt("Yes", i-1, 4);
               }
               else{
                   blockTableModel.setValueAt("No", i-1, 4);
  
               }
               i++;
            } while (officeTrackModel.getBlock(i,"red") != null);
            
            do{
                 
               if (officeTrackModel.getBlock(j, "green").isBlockOccupied()){
                   blockTableModel.setValueAt("Yes", j+77, 4);
               }
               else{
                   blockTableModel.setValueAt("No", j+77, 4);
  
               }
               j++;
            } while (officeTrackModel.getBlock(j,"green") != null);

    }
    public void loadTrack(String csv){
       
        try {
            officeTrackModel = new Track();
            officeTrackModel.loadTrack("RedLine.csv");
            //System.out.println(csv);
            blockTableModel= (DefaultTableModel)blockTable.getModel();
            stationTableModel = (DefaultTableModel)stationTable.getModel();
            //System.out.println(trackTester.getBlock(1, "green"));
            //model.addRow(new Object[]{1, trackTester.getBlock(1, "red").getBlockNumber(), trackTester.getBlock(1, "red").getSection(), trackTester.getBlock(1, "red"), trackTester.getBlock(1, "red").getLine(), trackTester.getBlock(1, "red").getInfrastructure(),false, true});    
                
            
            
            DecimalFormat df = new DecimalFormat("#.##");
            int i=1;
            int j=1;
            do{
                blockTableModel.addRow(new Object[]{officeTrackModel.getBlock(i,"red").getSection() + officeTrackModel.getBlock(i,"red").getBlockNumber(), officeTrackModel.getBlock(i,"red").getLine(), df.format(officeTrackModel.getBlock(i,"red").getSpeedLimit()*0.621371), officeTrackModel.getBlock(i,"red").getStation() + officeTrackModel.getBlock(i,"red").getSwitchNumber(), "No", "Enabled"});    
                if (officeTrackModel.getBlock(i,"red").isStation()){
                    stationTableModel.addRow(new Object[]{officeTrackModel.getBlock(i, "red").getStation(), officeTrackModel.getBlock(i, "red").getLine(), "0", "No"});
                }
                
                i++;
            } while (officeTrackModel.getBlock(i,"red") != null);
            
            do{
                blockTableModel.addRow(new Object[]{officeTrackModel.getBlock(j,"green").getSection() + officeTrackModel.getBlock(j,"green").getBlockNumber(), officeTrackModel.getBlock(j,"green").getLine(), df.format(officeTrackModel.getBlock(j,"green").getSpeedLimit()*0.621371), officeTrackModel.getBlock(j,"green").getStation() + officeTrackModel.getBlock(j,"green").getSwitchNumber(), "No", "Enabled"});    
                if (officeTrackModel.getBlock(j,"green").isStation()){
                    stationTableModel.addRow(new Object[]{officeTrackModel.getBlock(j, "green").getStation(), officeTrackModel.getBlock(j, "green").getLine(), "0", "No"});
                }
                j++;
            } while (officeTrackModel.getBlock(j,"green") != null);
//            
           
            fileInput.setEditable(false);
            loadTrackButton.setEnabled(false);
            dispatchBlockInput.setEnabled(true);
            speedLimitInput.setEnabled(true);
            trainIDInput.setEnabled(true);
            dispatchGreenLine.setEnabled(true);
            dispatchRedLine.setEnabled(true);
            dispatchTrainButton.setEnabled(true);
            
            Timer timer = new Timer((int) (1000 * DT), e -> {
            refreshOccupiedBlocks();
            });
            timer.setRepeats(true);
            timer.start();
        } catch (IOException ex) {
            Logger.getLogger(OfficeWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
         
    private void loadTrackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTrackButtonActionPerformed
        // TODO add your handling code here:
        String csv = fileInput.getText();
        loadTrack(csv);
        
    }//GEN-LAST:event_loadTrackButtonActionPerformed

    private void manualOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualOffButtonActionPerformed
        // TODO add your handling code here:
        dispatchBlockInput.setEditable(false);
        speedLimitInput.setEditable(false);
        dispatchTrainButton.setEnabled(false);
        dispatchGreenLine.setEnabled(false);
        dispatchRedLine.setEnabled(false);
    }//GEN-LAST:event_manualOffButtonActionPerformed

    private void manualOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualOnButtonActionPerformed
        // TODO add your handling code here:
        dispatchBlockInput.setEditable(true);
        speedLimitInput.setEditable(true);
        dispatchTrainButton.setEnabled(true);
        dispatchGreenLine.setEnabled(true);
        dispatchRedLine.setEnabled(true);
    }//GEN-LAST:event_manualOnButtonActionPerformed

    private void dispatchGreenLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispatchGreenLineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dispatchGreenLineActionPerformed

    private void dispatchBlockInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispatchBlockInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dispatchBlockInputActionPerformed

    private void dispatchTrainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispatchTrainButtonActionPerformed
        // TODO add your handling code here:
        String destBlock = dispatchBlockInput.getText();
        int destSpeed = Integer.parseInt(speedLimitInput.getText());
        int trainID = Integer.parseInt(trainIDInput.getText());
        String dispatchLine = "";
        Enumeration<AbstractButton> allRadioButton=DispatchLineButtonGroup.getElements();
        while(allRadioButton.hasMoreElements())
        {
            JRadioButton temp=(JRadioButton)allRadioButton.nextElement();
            if(temp.isSelected())
            {
                dispatchLine = temp.getText();
            }
        }
        int destBlockInt = Integer.parseInt(destBlock);
        officeTrackModel.getBlock(destBlockInt, dispatchLine);

        Block dest = handler.dispatchTrain(trainID,officeTrackModel.getBlock(destBlockInt, dispatchLine), (double)destSpeed);
        if (dest != null){
            DefaultTableModel model = (DefaultTableModel)trainTable.getModel();
            dest.getBlockNumber();
            model.addRow(new Object[]{trainID, dispatchLine, destBlock, destSpeed});
        }
        
        dispatchBlockInput.setText("");
        speedLimitInput.setText("");
        trainIDInput.setText("");
        DispatchLineButtonGroup.clearSelection();

    }//GEN-LAST:event_dispatchTrainButtonActionPerformed

    private void trainIDInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainIDInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainIDInputActionPerformed

    private void speedLimitInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedLimitInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_speedLimitInputActionPerformed

    private void dispatchRedLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispatchRedLineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dispatchRedLineActionPerformed

    private void toggleBlockStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBlockStatusActionPerformed
        // TODO add your handling code here:
        blockTableModel= (DefaultTableModel)blockTable.getModel();
        
       
        String line;
        int block;
        line = blockTableModel.getValueAt(blockTable.getSelectedRow(), 1).toString();
        String blockString = blockTableModel.getValueAt(blockTable.getSelectedRow(), 0).toString();
        blockString = blockString.replaceAll("[^\\d.]", "");
        block = Integer.parseInt(blockString);
        handler.maintenanceRequest(block, line);
        //str = str.replaceAll("[^\\d.]", "");
        
    }//GEN-LAST:event_toggleBlockStatusActionPerformed

    private void toggleSwitchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleSwitchButtonActionPerformed
        // TODO add your handling code here:
        blockTableModel= (DefaultTableModel)blockTable.getModel();
        String str = blockTableModel.getValueAt(blockTable.getSelectedRow(), 3).toString();
        //str = str.replaceAll("[^\\d.]", "");
        //System.out.println(str);
        if (str.contains("Switch")){
            handler.toggleSwitch(str);
        }
        
       
    }//GEN-LAST:event_toggleSwitchButtonActionPerformed

    private void authorityChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorityChangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorityChangeActionPerformed

    private void sendAuthorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendAuthorityActionPerformed
        // TODO add your handling code here:
        DefaultTableModel trainTableModel = (DefaultTableModel)trainTable.getModel();
        String line = trainTableModel.getValueAt(trainTable.getSelectedRow(), 1).toString();
        int trainID = Integer.parseInt(trainTableModel.getValueAt(trainTable.getSelectedRow(), 0).toString());
        int newBlock = Integer.parseInt(authorityChange.getText());
        int newSpeed = Integer.parseInt(newSpeedLimit.getText());
        officeTrackModel.getBlock(newBlock, line);
        Block destBlock = handler.sendAuthority(trainID, officeTrackModel.getBlock(newBlock, line), newSpeed);
        if (destBlock != null){
            trainTableModel.setValueAt(destBlock.getBlockNumber(), trainTable.getSelectedRow(), 2);
            trainTableModel.setValueAt(newSpeed, trainTable.getSelectedRow(), 3);
        }
        authorityChange.setText("");
        newSpeedLimit.setText("");
        trainTable.clearSelection();
    }//GEN-LAST:event_sendAuthorityActionPerformed

    private void newSpeedLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSpeedLimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newSpeedLimitActionPerformed
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.ButtonGroup DispatchLineButtonGroup;
    public javax.swing.JTextField authorityChange;
    public javax.swing.JPanel blockManagerPanel;
    public javax.swing.JScrollPane blockScrollPane5;
    public javax.swing.JTable blockTable;
    public javax.swing.JLabel clockLabel;
    public javax.swing.JSlider clockSlider;
    public javax.swing.JPanel controlsPanel;
    public javax.swing.JTextField dispatchBlockInput;
    public javax.swing.JLabel dispatchBlockLabel;
    public javax.swing.JRadioButton dispatchGreenLine;
    public javax.swing.JRadioButton dispatchRedLine;
    public javax.swing.JButton dispatchTrainButton;
    public javax.swing.JPanel dispatchTrainPanel;
    public javax.swing.JTextField fileInput;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JButton loadTrackButton;
    public javax.swing.ButtonGroup manualButtonGroup;
    public javax.swing.JLabel manualModeLabel;
    public javax.swing.JToggleButton manualOffButton;
    public javax.swing.JToggleButton manualOnButton;
    public javax.swing.JTextField newSpeedLimit;
    public javax.swing.JTabbedPane officeTabbedPane;
    public javax.swing.JPanel officejPanel;
    public javax.swing.JButton sendAuthority;
    public javax.swing.JTextField speedLimitInput;
    public javax.swing.JLabel speedLimitLabel;
    public javax.swing.JPanel stationPanel;
    public javax.swing.JScrollPane stationScrollPane1;
    public javax.swing.JTable stationTable;
    public javax.swing.JButton toggleBlockStatus;
    public javax.swing.JButton toggleSwitchButton;
    public javax.swing.JLabel trackMapImageLabel;
    public javax.swing.JTextField trainIDInput;
    public javax.swing.JLabel trainIDLabel;
    public javax.swing.JPanel trainPanel;
    public javax.swing.JScrollPane trainScrollPane2;
    public javax.swing.JTable trainTable;
    // End of variables declaration//GEN-END:variables
}
